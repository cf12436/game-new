/**
 * Êó•ÂøóÂ∑•ÂÖ∑ - Ê†πÊçÆÁéØÂ¢ÉÊéßÂà∂Êó•ÂøóËæìÂá∫
 */

const isDevelopment = process.env.NODE_ENV === 'development';
const isDebugMode = process.env.NEXT_PUBLIC_DEBUG === 'true';

export const logger = {
  /**
   * Ë∞ÉËØïÊó•Âøó - ‰ªÖÂú®ÂºÄÂèëÁéØÂ¢ÉÊàñË∞ÉËØïÊ®°Âºè‰∏ãÊòæÁ§∫
   */
  debug: (...args: any[]) => {
    if (isDevelopment || isDebugMode) {
      console.log('üêõ', ...args);
    }
  },

  /**
   * ‰ø°ÊÅØÊó•Âøó - ‰ªÖÂú®ÂºÄÂèëÁéØÂ¢ÉÊàñË∞ÉËØïÊ®°Âºè‰∏ãÊòæÁ§∫
   */
  info: (...args: any[]) => {
    if (isDevelopment || isDebugMode) {
      console.log('‚ÑπÔ∏è', ...args);
    }
  },

  /**
   * ÊàêÂäüÊó•Âøó - ‰ªÖÂú®ÂºÄÂèëÁéØÂ¢ÉÊàñË∞ÉËØïÊ®°Âºè‰∏ãÊòæÁ§∫
   */
  success: (...args: any[]) => {
    if (isDevelopment || isDebugMode) {
      console.log('‚úÖ', ...args);
    }
  },

  /**
   * Ë≠¶ÂëäÊó•Âøó - ÊÄªÊòØÊòæÁ§∫
   */
  warn: (...args: any[]) => {
    console.warn('‚ö†Ô∏è', ...args);
  },

  /**
   * ÈîôËØØÊó•Âøó - ÊÄªÊòØÊòæÁ§∫
   */
  error: (...args: any[]) => {
    console.error('‚ùå', ...args);
  },

  /**
   * Ê∏∏ÊàèÁõ∏ÂÖ≥Êó•Âøó
   */
  game: {
    load: (...args: any[]) => {
      if (isDevelopment || isDebugMode) {
        console.log('üéÆ', ...args);
      }
    },
    
    click: (...args: any[]) => {
      if (isDevelopment || isDebugMode) {
        console.log('üéØ', ...args);
      }
    },
    
    preload: (...args: any[]) => {
      if (isDevelopment || isDebugMode) {
        console.log('üöÄ', ...args);
      }
    }
  },

  /**
   * APIÁõ∏ÂÖ≥Êó•Âøó
   */
  api: {
    request: (...args: any[]) => {
      if (isDevelopment || isDebugMode) {
        console.log('üì°', ...args);
      }
    },
    
    response: (...args: any[]) => {
      if (isDevelopment || isDebugMode) {
        console.log('üìä', ...args);
      }
    },
    
    error: (...args: any[]) => {
      console.error('üí•', ...args);
    }
  },

  /**
   * ÊÄßËÉΩÁõ∏ÂÖ≥Êó•Âøó
   */
  perf: {
    start: (label: string) => {
      if (isDevelopment || isDebugMode) {
        console.time(`‚è±Ô∏è ${label}`);
      }
    },
    
    end: (label: string) => {
      if (isDevelopment || isDebugMode) {
        console.timeEnd(`‚è±Ô∏è ${label}`);
      }
    }
  }
};

export default logger;
